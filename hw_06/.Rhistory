install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
death = read.csv("data\\murder_suicide.csv")
death
head(deat, 5)
head(death, 5)
View(death)
print(cor_death)
cor_death <- cor(death[sapply(death, is.numeric)], use = "complete.obs")
print(cor_death)
View(cor_death)
colnames(death)
cor_death <- cor(death[sapply(death %>% select(imp_vars), is.numeric)], use = "complete.obs")
library(dplyr)
cor_death <- cor(death[sapply(death %>% select(imp_vars), is.numeric)], use = "complete.obs")
imp_vars = list("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision")
```{r}
cor_death <- cor(death[sapply(death %>% select(imp_vars), is.numeric)], use = "complete.obs")
imp_vars
cor_death <- cor(death[sapply(death %>% select(imp_vars), is.numeric)], use = "complete.obs")
imp_vars = vector("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision")
imp_vars = ("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision")
```{r}
imp_vars <- cor_house[,"SalePrice"] %>% sort(decreasing = T) %>% .[2:11] %>% names()
library(highcharter)
library(dplyr)
library(Hmisc)
library(psych)
library(tidyr)
library(olsrr)
library(DAAG)
dic_var = read.delim('dictionnaire_variables.csv',sep = ";")
dic_nvx = read.csv("dictionnaire_niveaux.csv") %>% select(1:3)
colnames(dic_nvx) <- c("variable", "label", "Type")
#View(dic_nvx)
house = read.csv("train.csv")
#View(house)
cor_house <- cor(house[sapply(house, is.numeric)], use = "complete.obs")
print(cor_house)
cor_test_house <- corr.test(house[sapply(house, is.numeric)], adjust = "none")
print(cor_test_house$p)
#View(cor_house)
cor_test_house$p[,"SalePrice"] %>% sort()
cor_house[,"SalePrice"] %>% sort(decreasing = T) %>% .[2:11]
imp_vars <- cor_house[,"SalePrice"] %>% sort(decreasing = T) %>% .[2:11] %>% names()
print(imp_vars)
house_important_atts =  house %>% select(c("Id",imp_vars, "SalePrice"))
pairs(house %>% select(c(imp_vars)), gap = 0, pch = ".")
#house_important_atts %>% gather(name_attr, value_attr, OverallQual:YearRemodAdd) %>% hchart("s", hcaes(x = value_attr, y = SalePrice, group = name_attr))
#model <- lm(SalePrice ~ OverallQual + GrLivArea + GarageCars + GarageArea + TotalBsmtSF +X1stFlrSF +FullBath + TotRmsAbvGrd + YearBuilt + YearRemodAdd , data = house_important_atts)
#print(ols_vif_tol(model))
model <- lm(SalePrice ~ OverallQual + GrLivArea + GarageCars + GarageArea + TotalBsmtSF +X1stFlrSF +FullBath + TotRmsAbvGrd + YearBuilt + YearRemodAdd , data = house_important_atts)
summary(model)
house_important_atts$predicted_1 <- predict(model)
house_important_atts$residuals_1 <- residuals(model)
ggplot(house_important_atts, aes(x = Id, y = SalePrice)) + geom_segment(aes(xend = Id, yend = predicted_1), alpha = 0.4) + geom_point(aes(size = abs(residuals_1), color = abs(residuals_1))) + geom_point(aes(y = predicted_1), shape = 1) + theme_bw()  + scale_color_continuous(low = "pink", high = "red") + ggtitle("Predicted Price and real price")
plot(model)
summary(model)
print(summary(model)$r.squared)
adjusted_model <- lm(SalePrice ~ OverallQual + GrLivArea + GarageCars + TotalBsmtSF +X1stFlrSF + YearBuilt + YearRemodAdd , data = house_important_atts)
summary(adjusted_model)
print(summary(adjusted_model)$r.squared)
plot(adjusted_model)
acf(house_important_atts$residuals_1)
Cross_validation <- cv.lm(data=house_important_atts, form.lm=adjusted_model, m= 5, plotit = F)
upp = Cross_validation %>% rowwise() %>% mutate(updif = (cvpred-SalePrice)^2, down = SalePrice^2)
error_cross_validation = mean(upp$updif)
error_cross_validation
test_data <- read.csv("test.csv")
ten_data <- predict(model, test_data)
View(ten_data)
write.csv(ten_data, "C:\\Users\\hoco\\Desktop\\data analysis\\hw_06\\ouuuuuuuut.csv")
str(imp_vars)
imp_vars = char("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision")
imp_vars = character("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision")
imp_vars = ["Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision"]
imp_vars = C("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision")
imp_vars = c("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision")
str(imp_vars)
cor_death <- cor(death[sapply(death %>% select(imp_vars), is.numeric)], use = "complete.obs")
cor_death <- cor(death[sapply(death %>% select(c(imp_vars)), is.numeric)], use = "complete.obs")
death_imp_vars <- death %>% select(c(imp_vars))
cor_death <- cor(death_imp_vars[sapply(death_imp_vars, is.numeric)], use = "complete.obs")
print(cor_death)
View(cor_death)
#View(cor_death)
pairs(death_imp_vars, gap = 0, pch = ".")
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars)
death_imp_vars[death_imp_vars$MannerOfDeath] = death_imp_vars$MannerOfDeath - 2
death_imp_vars[,"MannerOfDeath"] -= 2
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
View(cor_death)
head(death_imp_vars, 5)
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars)
summary(model_logit)
shuffled_death_imp_vars <- death_imp_vars
shuffle(shuffled_death_imp_vars)
?sample
x <- 1:12
# a random permutation
sample(x)
sample(shuffled_death_imp_vars)
shuffled_death_imp_vars <- death_imp_vars
sample(shuffled_death_imp_vars)
death_imp_vars
shuffled_death_imp_vars
death_imp_vars
sample(death_imp_vars)
death_imp_vars
c = c(1, 2, 3)
head (c, 1.5)
head (c, 0.5 * len(c))
head (c, 0.5 * length(c))
length(c)
tail (c, 0.5 * length(c))
?predict
sample(death_imp_vars)
death_imp_vars
train = head(death_imp_vars, 0.8 * length(death_imp_vars))
test = tail(death_imp_vars, 0.2 * length(death_imp_vars))
model_logit5 = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = train)
predicted = predict(model_logit5, test, type = "response")
test = tail(death_imp_vars, 0.2 * length(death_imp_vars))
model_logit5 = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = train)
predicted = predict(model_logit5, test, type = "response")
summary(predicted)
predicted = predict(model_logit5, test, type = "response")
predicted
length(test)
length(train)
length(test)
train
?top_n
btm_n
?btm_n
??btm_n
c
c[2:,]
c[2:3,]
c[2:3]
c[2:]
c[2:5]
c[2:3]
c[2:]
train = death_imp_vars[ 1:0.8 * length(death_imp_vars), ]
test = death_imp_vars[1:0.8 * length(death_imp_vars): length(death_imp_vars),  ]
length(train)
sample(death_imp_vars)
death_imp_vars
train = death_imp_vars[ 1:0.8 * length(death_imp_vars), ]
View(train)
View(train)
View(train)
train = death_imp_vars[1:0.8 * length(death_imp_vars)]
test = death_imp_vars[0.8 * length(death_imp_vars): length(death_imp_vars)]
View(test)
View(test)
View(train)
View(train)
train = death_imp_vars %>% slice(1:0.8 * length(death_imp_vars))
View(train)
View(train)
0.8 * length(death_imp_vars)
death_imp_vars
length(death_imp_vars)
nrow(death_imp_vars)
0.8 * nrow(death_imp_vars)
death_imp_vars
train = death_imp_vars %>% slice(1: 0.8 * nrow(death_imp_vars))
train = death_imp_vars %>% slice(1: 0.8 * nrow(death_imp_vars))
test = death_imp_vars[0.8 * length(death_imp_vars): nrow(death_imp_vars)]
test = death_imp_vars[0.8 * nrow(death_imp_vars): nrow(death_imp_vars),]
View(train)
0.8 * nrow(death_imp_vars)
?slice
slice(mtcars, 5:n())
train = death_imp_vars %>% slice(1: (0.8 * nrow(death_imp_vars)))
test = death_imp_vars %>% slice(0.8 * nrow(death_imp_vars): nrow(death_imp_vars))
length(train)
train = death_imp_vars %>% slice(1: (0.8 * nrow(death_imp_vars)))
test = death_imp_vars %>% slice((0.8 * nrow(death_imp_vars)): nrow(death_imp_vars))
model_logit5 = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = train)
predicted = predict(model_logit5, test, type = "response")
predicted
?chisq.test
library(readxl)
library(dplyr)
death = read.csv("data\\murder_suicide.csv")
colnames(death)
imp_vars = c("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision")
str(imp_vars)
death_imp_vars <- death %>% select(c(imp_vars))
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
#head(death_imp_vars, 5)
cor_death <- cor(death_imp_vars[sapply(death_imp_vars, is.numeric)], use = "complete.obs")
print(cor_death)
#View(cor_death)
pairs(death_imp_vars, gap = 0, pch = ".")
#View(cor_death)
pairs(death_imp_vars, gap = 0, pch = ".")
death_imp_vars %>% mutate(murder = ifelse(MannerOfDeath == 2, 0 , 1)) %>% mutate(sexNum = ifelse(Sex == "M", 0, 1)) %>% select(murder, sexNum)
death_imp_vars %>% mutate(sexNum = ifelse(Sex == "M", 0, 1)) %>% select(MannerOfDeath, sexNum)
chisq.test(data2)
death_imp_vars %>% mutate(sexNum = ifelse(Sex == "M", 0, 1)) %>% select(MannerOfDeath, sexNum) -> data2
chisq.test(data2)
data2
death_imp_vars %>% mutate(sexNum = ifelse(Sex == "M", 0, 1)) %>% select( sexNum, MannerOfDeath) -> data2
data2
chisq.test(data2)
death_imp_vars %>% mutate(sexNum = ifelse(Sex == "M", 0, 1)) %>% select(MannerOfDeath, sexNum) -> data2
chisq.test(data2)
death_imp_vars %>% select(MannerOfDeath, Age) -> data2
chisq.test(data2)
death_imp_vars %>% select(MannerOfDeath, Race)-> data2
chisq.test(data2)
death_imp_vars %>% select(MannerOfDeath, MethodOfDisposition)-> data2
chisq.test(data2)
names(death$MethodOfDisposition)
set(death$MethodOfDisposition)
Set(death$MethodOfDisposition)
str(death$MethodOfDisposition)
levels(death$MethodOfDisposition)
death_imp_vars %>% mutate(sexNum = ifelse(MethodOfDisposition == "B", 0, ifelse(MethodOfDisposition == "C", 1, ifelse(MethodOfDisposition == "D", 2, ifelse(MethodOfDisposition == "E", 3, ifelse(MethodOfDisposition == "O", 4, ifelse(MethodOfDisposition == "R", 5, 6))))))) %>% select(MannerOfDeath, MethodOfDisposition)-> data2
chisq.test(data2)
death_imp_vars %>% mutate(disposNum = ifelse(MethodOfDisposition == "B", 0, ifelse(MethodOfDisposition == "C", 1, ifelse(MethodOfDisposition == "D", 2, ifelse(MethodOfDisposition == "E", 3, ifelse(MethodOfDisposition == "O", 4, ifelse(MethodOfDisposition == "R", 5, 6))))))) %>% select(MannerOfDeath, disposNum)-> data2
chisq.test(data2)
death_imp_vars
data2
View(data2)
library(readxl)
library(dplyr)
death = read.csv("data\\murder_suicide.csv")
colnames(death)
imp_vars = c("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision", "PlaceOfDeathAndDecedentsStatus", "Autopsy", "ActivityCode" ,"PlaceOfInjury" )
str(imp_vars)
death_imp_vars <- death %>% select(c(imp_vars))
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
#head(death_imp_vars, 5)
cor_death <- cor(death_imp_vars[sapply(death_imp_vars, is.numeric)], use = "complete.obs")
print(cor_death)
#View(cor_death)
pairs(death_imp_vars, gap = 0, pch = ".")
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars)
summary(model_logit)
imp_vars =  c("Id", "ResidentStatus", "MonthOfDeath" , "Age","MannerOfDeath" ,"MethodOfDisposition", "Education2003Revision", "PlaceOfDeathAndDecedentsStatus", "Autopsy", "ActivityCode" ,"PlaceOfInjury" )
death_imp_vars <- death %>% select(c(imp_vars))
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars)
summary(model_logit)
plot(model_logit)
sample(death_imp_vars)
death_imp_vars
0.8 * nrow(death_imp_vars)
train = death_imp_vars %>% slice(1: (0.8 * nrow(death_imp_vars)))
death_imp_vars
train = death_imp_vars %>% slice(1: (0.8 * nrow(death_imp_vars)))
test = death_imp_vars %>% slice((0.8 * nrow(death_imp_vars)): nrow(death_imp_vars))
model_logit5 = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = train)
train$predict = predict(model_logit5, train, type = "response")
test$predict = predict(model_logit5, test, type = "response")
cm_info = ConfusionMatrixInfo( data = test, predict = "prediction",
actual = "admit", cutoff = .6 )
cm_info = ConfusionMatrixInfo( data = test, predict = "predict",
actual = "MannerOfDeath", cutoff = .6 )
?ConfusionMatrixInfo
??ConfusionMatrixInfo
library(heuristica)
install.packages("heuristica")
library(heuristica)
cm_info = ConfusionMatrixInfo( data = test, predict = "predict",
actual = "MannerOfDeath", cutoff = .5 )
sample(death_imp_vars)
train = death_imp_vars %>% slice(1: (0.8 * nrow(death_imp_vars)))
test = death_imp_vars %>% slice((0.8 * nrow(death_imp_vars)): nrow(death_imp_vars))
model_logit5 = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = train)
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars)
sample(death_imp_vars)
sample(death_imp_vars)
install.packages("merTools")
library(merTools)
shuffle(death_imp_vars)
?shuffle
library(merTools)
shuffle(death_imp_vars)
shuffle(death_imp_vars)
??shuffle
merTools::shuffle(death_imp_vars)
imp_vars = c("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision", "PlaceOfDeathAndDecedentsStatus", "Autopsy", "ActivityCode" ,"PlaceOfInjury", "RaceRecode5")
death_imp_vars <- death %>% select(c(imp_vars))
imp_vars = c("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision", "PlaceOfDeathAndDecedentsStatus", "Autopsy", "ActivityCode" ,"PlaceOfInjury", "RaceRecode5")
library(heuristica)
library(readxl)
library(dplyr)
library(merTools)
death = read.csv("data\\murder_suicide.csv")
colnames(death)
imp_vars = c("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision", "PlaceOfDeathAndDecedentsStatus", "Autopsy", "ActivityCode" ,"PlaceOfInjury", "RaceRecode5")
death_imp_vars <- death %>% select(c(imp_vars))
str(imp_vars)
death_imp_vars <- death %>% select(c(imp_vars))
imp_vars = c("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision", "PlaceOfDeathAndDecedentsStatus", "Autopsy", "ActivityCode" ,"PlaceOfInjury", "RaceRecode5")
death_imp_vars <- death %>% select(c(imp_vars))
library(heuristica)
library(readxl)
library(dplyr)
library(merTools)
death = read.csv("data\\murder_suicide.csv")
colnames(death)
imp_vars = c("Id", "ResidentStatus", "MonthOfDeath" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Race", "Education2003Revision", "PlaceOfDeathAndDecedentsStatus", "Autopsy", "ActivityCode" ,"PlaceOfInjury", "RaceRecode5")
str(imp_vars)
death_imp_vars <- death %>% select(c(imp_vars))
