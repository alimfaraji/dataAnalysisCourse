n = 12
ans = rep(0,n)
people = 1:n
all_subsets = powerset(people)
for (subset in all_subsets){
values = rep(0,n)
for (false in subset){
values[false] = 1
}
temp = 0
for(i in 1:n){
if(i == 1){
if (values[i]==0 && ((values[n] == 1 && values[i+1] == 1) || (values[n] == 0 && values[i+1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[n] == 1 && values[i+1] == 0) || (values[n] == 0 && values[i+1] == 1))){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && ((values[1] == 1 && values[i-1] == 1) || (values[1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[1] == 1 && values[i-1] == 0) || (values[1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}else{
if (values[i]==0 && ((values[i+1] == 1 && values[i-1] == 1) || (values[i+1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[i+1] == 1 && values[i-1] == 0) || (values[i+1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}
}
if(temp == 0){
ans = values
break
}
}
ans
n = 8
four_subsets = combn(1:n, n/2)
types = rep(0,n)
ans = rep(0,n)
people = 1:n
all_subsets = powerset(people)
for (four_subset in four_subsets){
for (subset in all_subsets){
temp = 0
for (i in 1:n){
if (is.element(i, four_subset)){
if(i == 1){
if (values[i]==0 && ((values[n] == 1 && values[i+1] == 1) || (values[n] == 0 && values[i+1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[n] == 1 && values[i+1] == 0) || (values[n] == 0 && values[i+1] == 1))){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && ((values[1] == 1 && values[i-1] == 1) || (values[1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[1] == 1 && values[i-1] == 0) || (values[1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}else{
if (values[i]==0 && ((values[i+1] == 1 && values[i-1] == 1) || (values[i+1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[i+1] == 1 && values[i-1] == 0) || (values[i+1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}
}else{
if(i == 1){
if (values[i]==0 && (values[n] == 0 || values[i+1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[n] == 1 && values[i+1] == 1)){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && (values[1] == 0 || values[i-1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[1] == 1 && values[i-1] == 1)){
temp = 1
break
}
}else{
if (values[i]==0 && (values[i+1] == 0 || values[i-1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[i+1] == 1 && values[i-1] == 1)){
temp = 1
break
}
}
}
}
if (temp == 0){
ans = values
for (j in 1:n){
if(is.element(j, four_subset))
types[j] = 1;
}
return()
}
}
}
ans
types
library(survival)
library(abind)
library(magic)
magic4 = magic(4)
magic5 = magic(5)
magic6 = magic(6)
magic4
rowSums(magic4)
colSums(magic4)
magic5
rowSums(magic5)
colSums(magic5)
magic6
rowSums(magic6)
colSums(magic6)
library(HapEstXXR)
n = 16
ans = rep(0,n)
people = 1:15
all_subsets = powerset(people)
for (subset in all_subsets){
values = rep(0,n)
for (false in subset){
values[false] = 1
}
temp = 0
for(i in 1:n){
if(i == 1){
if (values[i]==0 && (values[n] == 0 || values[i+1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[n] == 1 && values[i+1] == 1)){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && (values[1] == 0 || values[i-1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[1] == 1 && values[i-1] == 1)){
temp = 1
break
}
}else{
if (values[i]==0 && (values[i+1] == 0 || values[i-1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[i+1] == 1 && values[i-1] == 1)){
temp = 1
break
}
}
}
if(temp == 0){
ans = values
break
}
}
ans
n = 12
ans = rep(0,n)
people = 1:n
all_subsets = powerset(people)
for (subset in all_subsets){
values = rep(0,n)
for (false in subset){
values[false] = 1
}
temp = 0
for(i in 1:n){
if(i == 1){
if (values[i]==0 && ((values[n] == 1 && values[i+1] == 1) || (values[n] == 0 && values[i+1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[n] == 1 && values[i+1] == 0) || (values[n] == 0 && values[i+1] == 1))){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && ((values[1] == 1 && values[i-1] == 1) || (values[1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[1] == 1 && values[i-1] == 0) || (values[1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}else{
if (values[i]==0 && ((values[i+1] == 1 && values[i-1] == 1) || (values[i+1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[i+1] == 1 && values[i-1] == 0) || (values[i+1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}
}
if(temp == 0){
ans = values
break
}
}
ans
n = 8
four_subsets = combn(1:n, n/2)
types = rep(0,n)
ans = rep(0,n)
people = 1:n
all_subsets = powerset(people)
for (four_subset in four_subsets){
for (subset in all_subsets){
temp = 0
for (i in 1:n){
if (is.element(i, four_subset)){
if(i == 1){
if (values[i]==0 && ((values[n] == 1 && values[i+1] == 1) || (values[n] == 0 && values[i+1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[n] == 1 && values[i+1] == 0) || (values[n] == 0 && values[i+1] == 1))){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && ((values[1] == 1 && values[i-1] == 1) || (values[1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[1] == 1 && values[i-1] == 0) || (values[1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}else{
if (values[i]==0 && ((values[i+1] == 1 && values[i-1] == 1) || (values[i+1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[i+1] == 1 && values[i-1] == 0) || (values[i+1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}
}else{
if(i == 1){
if (values[i]==0 && (values[n] == 0 || values[i+1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[n] == 1 && values[i+1] == 1)){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && (values[1] == 0 || values[i-1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[1] == 1 && values[i-1] == 1)){
temp = 1
break
}
}else{
if (values[i]==0 && (values[i+1] == 0 || values[i-1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[i+1] == 1 && values[i-1] == 1)){
temp = 1
break
}
}
}
}
if (temp == 0){
ans = values
for (j in 1:n){
if(is.element(j, four_subset))
types[j] = 1;
}
return()
}
}
}
ans
types
library(survival)
library(abind)
library(magic)
magic4 = magic(4)
magic5 = magic(5)
magic6 = magic(6)
magic4
rowSums(magic4)
colSums(magic4)
magic5
rowSums(magic5)
colSums(magic5)
magic6
rowSums(magic6)
colSums(magic6)
library(HapEstXXR)
n = 16
ans = rep(0,n)
people = 1:15
all_subsets = powerset(people)
for (subset in all_subsets){
values = rep(0,n)
for (false in subset){
values[false] = 1
}
temp = 0
for(i in 1:n){
if(i == 1){
if (values[i]==0 && (values[n] == 0 || values[i+1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[n] == 1 && values[i+1] == 1)){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && (values[1] == 0 || values[i-1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[1] == 1 && values[i-1] == 1)){
temp = 1
break
}
}else{
if (values[i]==0 && (values[i+1] == 0 || values[i-1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[i+1] == 1 && values[i-1] == 1)){
temp = 1
break
}
}
}
if(temp == 0){
ans = values
break
}
}
ans
n = 12
ans = rep(0,n)
people = 1:n
all_subsets = powerset(people)
for (subset in all_subsets){
values = rep(0,n)
for (false in subset){
values[false] = 1
}
temp = 0
for(i in 1:n){
if(i == 1){
if (values[i]==0 && ((values[n] == 1 && values[i+1] == 1) || (values[n] == 0 && values[i+1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[n] == 1 && values[i+1] == 0) || (values[n] == 0 && values[i+1] == 1))){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && ((values[1] == 1 && values[i-1] == 1) || (values[1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[1] == 1 && values[i-1] == 0) || (values[1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}else{
if (values[i]==0 && ((values[i+1] == 1 && values[i-1] == 1) || (values[i+1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[i+1] == 1 && values[i-1] == 0) || (values[i+1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}
}
if(temp == 0){
ans = values
break
}
}
ans
n = 8
four_subsets = combn(1:n, n/2)
types = rep(0,n)
ans = rep(0,n)
people = 1:n
all_subsets = powerset(people)
for (four_subset in four_subsets){
for (subset in all_subsets){
temp = 0
for (i in 1:n){
if (is.element(i, four_subset)){
if(i == 1){
if (values[i]==0 && ((values[n] == 1 && values[i+1] == 1) || (values[n] == 0 && values[i+1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[n] == 1 && values[i+1] == 0) || (values[n] == 0 && values[i+1] == 1))){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && ((values[1] == 1 && values[i-1] == 1) || (values[1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[1] == 1 && values[i-1] == 0) || (values[1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}else{
if (values[i]==0 && ((values[i+1] == 1 && values[i-1] == 1) || (values[i+1] == 0 && values[i-1] == 0))){
temp = 1
break
}
if (values[i] == 1 && ((values[i+1] == 1 && values[i-1] == 0) || (values[i+1] == 0 && values[i-1] == 1))){
temp = 1
break
}
}
}else{
if(i == 1){
if (values[i]==0 && (values[n] == 0 || values[i+1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[n] == 1 && values[i+1] == 1)){
temp = 1
break
}
}else if (i == n) {
if (values[i]==0 && (values[1] == 0 || values[i-1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[1] == 1 && values[i-1] == 1)){
temp = 1
break
}
}else{
if (values[i]==0 && (values[i+1] == 0 || values[i-1] == 0)){
temp = 1
break
}
if (values[i] == 1 && (values[i+1] == 1 && values[i-1] == 1)){
temp = 1
break
}
}
}
}
if (temp == 0){
ans = values
for (j in 1:n){
if(is.element(j, four_subset))
types[j] = 1;
}
return()
}
}
}
ans
types
knit_with_parameters('C:/Users/hoco/Desktop/data analysis/hw_01/hw_01/hw_01.Rmd')
install.packages("rino")
install.packages("Rmosek")
install.packages("RInno")
