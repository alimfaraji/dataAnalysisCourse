chglm = h2o.glm(y = "MannerOfDeath", x= imp_vars,
training_frame = happly, family="binomial",nfolds = 5)
chglm
plot(death_imp_vars$MannerOfDeath, death_imp_vars$Education2003Revision, xlab="Education", ylab="Death")
points(death_imp_vars$MannerOfDeath,fitted(model_logit),pch=20,type = "p")
plot(death_imp_vars$MannerOfDeath, death_imp_vars$Education2003Revision, xlab="Education", ylab="Death")
points(death_imp_vars$MannerOfDeath,fitted(model_logit),pch=20,type = "p")
plot(death_imp_vars$Education2003Revision, death_imp_vars$MannerOfDeath, xlab="Education", ylab="Death")
points(death_imp_vars$MannerOfDeath,fitted(model_logit),pch=20,type = "p")
plot.new()
plot(death_imp_vars$Education2003Revision, death_imp_vars$MannerOfDeath, xlab="Education", ylab="Death")
points(death_imp_vars$MannerOfDeath,fitted(model_logit),pch=20,type = "p")
plot.new()
points(death_imp_vars$MannerOfDeath,fitted(model_logit),pch=20,type = "p")
popbio::logi.hist.plot(death_imp_vars$Id, death_imp_vars$MannerOfDeath,
boxp=FALSE,type="hist",col="gray")
install.packages("popbio")
library(popbio)
popbio::logi.hist.plot(death_imp_vars$Id, death_imp_vars$MannerOfDeath,
boxp=FALSE,type="hist",col="gray")
popbio::logi.hist.plot(death_imp_vars$Id, death_imp_vars$MannerOfDeath,
boxp=FALSE,type="hist",col="gray")
popbio::logi.hist.plot(death_imp_vars$Education2003Revision, death_imp_vars$MannerOfDeath,
boxp=FALSE,type="hist",col="gray")
popbio::logi.hist.plot(death_imp_vars$Autopsy, death_imp_vars$MannerOfDeath,
boxp=FALSE,type="hist",col="gray")
popbio::logi.hist.plot(death_imp_vars$Age, death_imp_vars$MannerOfDeath,
boxp=FALSE,type="hist",col="gray")
popbio::logi.hist.plot(death_imp_vars$Age, death_imp_vars$MannerOfDeath,
boxp=FALSE,type="hist",col="gray")
popbio::logi.hist.plot(death_imp_vars$RaceRecode5, death_imp_vars$MannerOfDeath,
boxp=FALSE,type="hist",col="gray")
plot(death_imp_vars$Education2003Revision, death_imp_vars$MannerOfDeath, xlab="Education", ylab="Death")
points(death_imp_vars$MannerOfDeath,fitted(model_logit),pch=20,type = "p")
plot(death_imp_vars$Education2003Revision, death_imp_vars$MannerOfDeath, xlab="Education", ylab="Death")
points(death_imp_vars$MannerOfDeath,fitted(model_logit),pch=20,type = "p")
window()
plot.new()
?plot.new
frame()
plot(death_imp_vars$Education2003Revision, death_imp_vars$MannerOfDeath, xlab="Education", ylab="Death")
points(death_imp_vars$MannerOfDeath,fitted(model_logit),pch=20,type = "p")
frame()
window()
?window
dev.off()
plot(death_imp_vars$Education2003Revision, death_imp_vars$MannerOfDeath, xlab="Education", ylab="Death")
points(death_imp_vars$MannerOfDeath,fitted(model_logit),pch=20,type = "p")
data4 = death_imp_vars
date4$predicted = predict(model_logit, data4, type = "response")
View(data4)
View(death_imp_vars)
imp_vars = c("Id", "ResidentStatus" , "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Education2003Revision", "Autopsy" ,"PlaceOfInjury", "RaceRecode5")
death_imp_vars <- death %>% select(c(imp_vars))
knitr::opts_chunk$set(echo = TRUE,comment = "",error = F,message = F,
warning = F,fig.width = 10,fig.height = 6,fig.align = "center")
library(readr)
library(ggplot2)
library(highcharter)
library(ggthemes)
library(heuristica)
library(readxl)
library(dplyr)
library(caret)
source("unbalanced_functions.R")
death = read.csv("data\\murder_suicide.csv")
colnames(death)
imp_vars = c("Id", "ResidentStatus" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Education2003Revision", "Autopsy" ,"PlaceOfInjury", "RaceRecode5")
str(imp_vars)
death_imp_vars <- death %>% select(c(imp_vars))
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
#head(death_imp_vars, 5)
cor_death <- cor(death_imp_vars[sapply(death_imp_vars, is.numeric)], use = "complete.obs")
print(cor_death)
#View(cor_death)
pairs(death_imp_vars, gap = 0, pch = ".")
death_imp_vars_factor = death_imp_vars
#View(death_imp_vars_factor)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
death_imp_vars$Age = as.factor(death_imp_vars_factor$Age)
death_imp_vars$DayOfWeekOfDeath = as.factor(death_imp_vars_factor$DayOfWeekOfDeath)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
death_imp_vars$Education2003Revision = as.factor(death_imp_vars_factor$Education2003Revision)
death_imp_vars$PlaceOfInjury = as.factor(death_imp_vars_factor$PlaceOfInjury)
death_imp_vars$RaceRecode5 = as.factor(death_imp_vars_factor$RaceRecode5)
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars_factor)
summary(model_logit)
imp_vars = c("Id", "ResidentStatus" , "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Education2003Revision", "Autopsy" ,"PlaceOfInjury", "RaceRecode5")
death_imp_vars <- death %>% select(c(imp_vars))
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
death_imp_vars_factor = death_imp_vars
#View(death_imp_vars_factor)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
death_imp_vars$DayOfWeekOfDeath = as.factor(death_imp_vars_factor$DayOfWeekOfDeath)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
death_imp_vars$Education2003Revision = as.factor(death_imp_vars_factor$Education2003Revision)
death_imp_vars$PlaceOfInjury = as.factor(death_imp_vars_factor$PlaceOfInjury)
death_imp_vars$RaceRecode5 = as.factor(death_imp_vars_factor$RaceRecode5)
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars)
summary(model_logit)
death_imp_vars = death_imp_vars_factor
data4 = death_imp_vars
date4$predicted = predict(model_logit, data4, type = "response")
imp_vars = c("Id", "ResidentStatus" , "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Education2003Revision", "Autopsy" ,"PlaceOfInjury", "RaceRecode5")
death_imp_vars <- death %>% select(c(imp_vars))
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
death_imp_vars_factor = death_imp_vars
#View(death_imp_vars_factor)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
death_imp_vars$DayOfWeekOfDeath = as.factor(death_imp_vars_factor$DayOfWeekOfDeath)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
death_imp_vars$Education2003Revision = as.factor(death_imp_vars_factor$Education2003Revision)
death_imp_vars$PlaceOfInjury = as.factor(death_imp_vars_factor$PlaceOfInjury)
death_imp_vars$RaceRecode5 = as.factor(death_imp_vars_factor$RaceRecode5)
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars)
summary(model_logit)
data4 = death_imp_vars
date4$predicted = predict(model_logit, data4, type = "response")
data4 = death_imp_vars
datÿ¥4$predicted = predict(model_logit, data4, type = "response")
data4$predicted = predict(model_logit, data4, type = "response")
ggplot(data4, aes(x = RaceRecode5, y = MannerOfDeath)) + geom_point()
ggplot(data4, aes(x = Id, y = MannerOfDeath)) + geom_point()
ggplot(data4, aes(x = Education2003Revision, y = MannerOfDeath)) + geom_point()
ggplot(data4, aes(x = Education2003Revision, y = MannerOfDeath)) + geom_point(aes(size = Education2003Revision))
ggplot(data4, aes(x = RaceRecode5, y = MannerOfDeath)) + geom_point(aes(size = RaceRecode5))
ggplot(data4) + geom_point(aes(x = RaceRecode5, y = MannerOfDeathsize = RaceRecode5)) + geom_point(aes(x = RaceRecode5, y = predicted))
ggplot(data4) + geom_point(aes(x = RaceRecode5, y = MannerOfDeathsize)) + geom_point(aes(x = RaceRecode5, y = predicted))
ggplot(data4) + geom_point(aes(x = data4$RaceRecode5, y = data4$MannerOfDeath)) + geom_point(aes(x = RaceRecode5, y = predicted))
ggplot(data4) + geom_point(aes(x = data4$Id, y = data4$MannerOfDeath)) + geom_point(aes(x = Id, y = predicted))
cm_test  <- confusionMatrix( as.factor(as.numeric( test[[predict]]  > c )), as.factor(test[[actual]])  )
dt <- data.table( cutoff = c,
train  = cm_train$overall[["Accuracy"]],
test   = cm_test$overall[["Accuracy"]] )
train$predict = as.factor(train$predict)
test$predict = as.factor(test$predict)
train$MannerOfDeath = as.factor(train$MannerOfDeath)
test$MannerOfDeath = as.factor(test$MannerOfDeath)
accuracy_info = AccuracyCutoffInfo( train = train, test = test,
predict = "predict", actual = "MannerOfDeath" )
source("unbalanced_functions.R")
accuracy_info = AccuracyCutoffInfo( train = train, test = test,
predict = "predict", actual = "MannerOfDeath" )
set.seed(003)
data5 = death_imp_vars[sample(1:nrow(death_imp_vars)), ]
train = death_imp_vars %>% slice(1: (0.8 * nrow(death_imp_vars)))
test = death_imp_vars %>% slice((0.8 * nrow(death_imp_vars)): nrow(death_imp_vars))
model_logit5 = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = train)
train$predict = predict(model_logit5, train, type = "response")
train$predict = ifelse(train$predict <= 0.5, 0, 1)
test$predict = predict(model_logit5, test, type = "response")
test$predict = ifelse(test$predict <= 0.5, 0, 1)
test$MannerOfDeath = as.factor(test$MannerOfDeath)
library(e1071)
cmMatrix = confusionMatrix( as.factor(test$predict), as.factor(test$MannerOfDeath))
cmMatrix
#train$predict = as.factor(train$predict)
#test$predict = as.factor(test$predict)
#train$MannerOfDeath = as.factor(train$MannerOfDeath)
#test$MannerOfDeath = as.factor(test$MannerOfDeath)
accuracy_info = AccuracyCutoffInfo( train = train, test = test,
predict = "predict", actual = "MannerOfDeath" )
#train$predict = as.factor(train$predict)
#test$predict = as.factor(test$predict)
#train$MannerOfDeath = as.factor(train$MannerOfDeath)
#test$MannerOfDeath = as.factor(test$MannerOfDeath)
accuracy_info = AccuracyCutoffInfo( train = train, test = test,
predict = "predict", actual = "MannerOfDeath" )
ggplot(data4) + geom_point(aes(x = data4$MethodOfDisposition, y = data4$MannerOfDeath)) + geom_point(aes(x = MethodOfDisposition, y = predicted))
ggmm(data4, MannerOfDeath, Education2003Revision)
??ggmm
devtools::install_github("EdwinTh/thatssorandom")
library(thatssorandom)
ggmm(data4, MannerOfDeath, Education2003Revision)
ggmm(data4, MannerOfDeath, DayOfWeekOfDeath)
ggmm(data4, MannerOfDeath, Autopsy)
ggmm(data4, MannerOfDeath, MethodOfDisposition)
ggmm(data4, MannerOfDeath, PlaceOfInjury)
ggmm(data4, MannerOfDeath, RaceRecode5)
data4 = death_imp_vars
data4$predicted = predict(model_logit, data4, type = "response")
library(thatssorandom)
ggmm(data4, MannerOfDeath, Education2003Revision)
ggmm(data4, MannerOfDeath, DayOfWeekOfDeath)
ggmm(data4, MannerOfDeath, Autopsy)
ggmm(data4, MannerOfDeath, MethodOfDisposition)
ggmm(data4, MannerOfDeath, PlaceOfInjury)
ggmm(data4, MannerOfDeath, RaceRecode5)
library(popbio)
popbio::logi.hist.plot(death_imp_vars$RaceRecode5, death_imp_vars$MannerOfDeath,
boxp=FALSE,type="hist",col="gray")
plot(model_logit)
popbio::logi.hist.plot(death_imp_vars$RaceRecode5, death_imp_vars$MannerOfDeath,
boxp=FALSE,type="hist",col="gray")
plot(model_logit)
plot(model_logit)[0]
ppp = plot(model_logit)
View(ppp)
data4 = death_imp_vars
data4$predicted = predict(model_logit, data4, type = "response")
library(thatssorandom)
ggmm(data4, MannerOfDeath, Education2003Revision)
ggmm(data4, MannerOfDeath, DayOfWeekOfDeath)
ggmm(data4, MannerOfDeath, Autopsy)
ggmm(data4, MannerOfDeath, MethodOfDisposition)
ggmm(data4, MannerOfDeath, PlaceOfInjury)
ggmm(data4, MannerOfDeath, RaceRecode5)
ppp = plot(model_logit)
accuracy_info$plot
#train$predict = as.factor(train$predict)
#test$predict = as.factor(test$predict)
#train$MannerOfDeath = as.factor(train$MannerOfDeath)
#test$MannerOfDeath = as.factor(test$MannerOfDeath)
accuracy_info = AccuracyCutoffInfo( train = train, test = test,
predict = "predict", actual = "MannerOfDeath" )
accuracy_info$plot
set.seed(003)
data5 = death_imp_vars[sample(1:nrow(death_imp_vars)), ]
train = death_imp_vars %>% slice(1: (0.8 * nrow(death_imp_vars)))
test = death_imp_vars %>% slice((0.8 * nrow(death_imp_vars)): nrow(death_imp_vars))
model_logit5 = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = train)
model_logit5 = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = train)
train$predict = predict(model_logit5, train, type = "response")
train$predict = ifelse(train$predict <= 0.5, 0, 1)
test$predict = predict(model_logit5, test, type = "response")
test$predict = ifelse(test$predict <= 0.5, 0, 1)
test$MannerOfDeath = as.factor(test$MannerOfDeath)
library(e1071)
cmMatrix = confusionMatrix( as.factor(test$predict), as.factor(test$MannerOfDeath))
cmMatrix
#train$predict = as.factor(train$predict)
#test$predict = as.factor(test$predict)
#train$MannerOfDeath = as.factor(train$MannerOfDeath)
#test$MannerOfDeath = as.factor(test$MannerOfDeath)
accuracy_info = AccuracyCutoffInfo( train = train, test = test,
predict = "predict", actual = "MannerOfDeath" )
accuracy_info$plot
colnames(Ys)
colnames(death_imp_vars)
Ys = death_imp_vars[,"MannerOfDeath"]
Sexs = death_imp_vars[,"Sex"]
knitr::opts_chunk$set(echo = TRUE,comment = "",error = F,message = F,
warning = F,fig.width = 10,fig.height = 6,fig.align = "center")
library(readr)
library(ggplot2)
library(highcharter)
library(ggthemes)
library(heuristica)
library(readxl)
library(dplyr)
library(caret)
source("unbalanced_functions.R")
death = read.csv("data\\murder_suicide.csv")
colnames(death)
imp_vars = c("Id", "ResidentStatus" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Education2003Revision", "Autopsy" ,"PlaceOfInjury", "RaceRecode5")
str(imp_vars)
death_imp_vars <- death %>% select(c(imp_vars))
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
#head(death_imp_vars, 5)
cor_death <- cor(death_imp_vars[sapply(death_imp_vars, is.numeric)], use = "complete.obs")
print(cor_death)
#View(cor_death)
pairs(death_imp_vars, gap = 0, pch = ".")
Ys = death_imp_vars[,"MannerOfDeath"]
Sexs = death_imp_vars[,"Sex"]
Ages = death_imp_vars[,"Age"]
colnames(death_imp_vars)
Residents = death_imp_vars[,"ResidentStatus"]
DayOfWeekOfDeaths = death_imp_vars[,"DayOfWeekOfDeath"]
MethodOfDisposition = death_imp_vars[,"MethodOfDisposition"]
Education2003Revision = death_imp_vars[,"Education2003Revision"]
Autopsy = death_imp_vars[,"Autopsy"]
PlaceOfInjury = death_imp_vars[,"PlaceOfInjury"]
RaceRecode5 = death_imp_vars[,"RaceRecode5"]
#death_imp_vars %>% mutate(sexNum = ifelse(Sex == "M", 0, 1)) %>% select(MannerOfDeath, sexNum) -> data2
#death_imp_vars %>% mutate(disposNum = ifelse(MethodOfDisposition == "B", 0, ifelse(MethodOfDisposition == "C", 1, ifelse(MethodOfDisposition == "D", 2, ifelse(MethodOfDisposition == "E", 3, ifelse(MethodOfDisposition == "O", 4, ifelse(MethodOfDisposition == "R", 5, 6))))))) %>% select(MannerOfDeath, disposNum)-> data2
#View(data2)
chisq.test(Ys, DayOfWeekOfDeaths)
chisq.test(Ys, MethodOfDisposition)
chisq.test(Ys, Education2003Revision)
chisq.test(Ys, Autopsy)
chisq.test(Ys, PlaceOfInjury)
chisq.test(Ys, RaceRecode5)
chisq.test(Ys, Sexs)
chisq.test(Ys, Ages)
chisq.test(Ys, Residents)
chisq.test(Ys, as.factor(Residents))
chisq.test(Ys, as.factor(Ages))
chisq.test(Ys, as.factor(Sexs))
chisq.test(Ys, as.factor(RaceRecode5))
imp_vars = c("Id", "ResidentStatus", "MannerOfDeath" ,"MethodOfDisposition", "Education2003Revision", "Autopsy" ,"PlaceOfInjury", "RaceRecode5")
death_imp_vars <- death %>% select(c(imp_vars))
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
death_imp_vars_factor = death_imp_vars
#View(death_imp_vars_factor)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
#death_imp_vars$DayOfWeekOfDeath = as.factor(death_imp_vars_factor$DayOfWeekOfDeath)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
death_imp_vars$Education2003Revision = as.factor(death_imp_vars_factor$Education2003Revision)
death_imp_vars$PlaceOfInjury = as.factor(death_imp_vars_factor$PlaceOfInjury)
death_imp_vars$RaceRecode5 = as.factor(death_imp_vars_factor$RaceRecode5)
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars)
summary(model_logit)
cost_fp = 100;cost_fn = 200
roc_info = ROCInfo( data = cm_info$data, predict = "predict",
actual = "actual", cost.fp = cost_fp, cost.fn = cost_fn )
grid.draw(roc_info$plot)
#train$predict = as.factor(train$predict)
#test$predict = as.factor(test$predict)
#train$MannerOfDeath = as.factor(train$MannerOfDeath)
#test$MannerOfDeath = as.factor(test$MannerOfDeath)
accuracy_info = AccuracyCutoffInfo( train = train, test = test,
predict = "predict", actual = "MannerOfDeath" )
accuracy_info$plot
library(h2o)
h2o.init()
happly = as.h2o(death_imp_vars)
#hglm = h2o.glm(y = "MannerOfDeath", x= imp_vars,
#    training_frame = happly, family="binomial")
chglm = h2o.glm(y = "MannerOfDeath", x= imp_vars,
training_frame = happly, family="binomial",nfolds = 5)
chglm
knitr::opts_chunk$set(echo = TRUE,comment = "",error = F,message = F,
warning = F,fig.width = 10,fig.height = 6,fig.align = "center")
library(readr)
library(ggplot2)
library(highcharter)
library(ggthemes)
library(heuristica)
library(readxl)
library(dplyr)
library(caret)
source("unbalanced_functions.R")
death = read.csv("data\\murder_suicide.csv")
#colnames(death)
imp_vars = c("Id", "ResidentStatus" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Education2003Revision", "Autopsy" ,"PlaceOfInjury", "RaceRecode5")
knitr::opts_chunk$set(echo = TRUE,comment = "",error = F,message = F,
warning = F,fig.width = 10,fig.height = 6,fig.align = "center")
library(readr)
library(ggplot2)
library(highcharter)
library(ggthemes)
library(heuristica)
library(readxl)
library(dplyr)
library(caret)
source("unbalanced_functions.R")
death = read.csv("data\\murder_suicide.csv")
#colnames(death)
imp_vars = c("Id", "ResidentStatus" , "Sex",  "Age", "DayOfWeekOfDeath", "MannerOfDeath" ,"MethodOfDisposition", "Education2003Revision", "Autopsy" ,"PlaceOfInjury", "RaceRecode5")
death_imp_vars <- death %>% select(c(imp_vars))
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
#head(death_imp_vars, 5)
cor_death <- cor(death_imp_vars[sapply(death_imp_vars, is.numeric)], use = "complete.obs")
print(cor_death)
#View(cor_death)
pairs(death_imp_vars, gap = 0, pch = ".")
Ys = death_imp_vars[,"MannerOfDeath"]
Sexs = death_imp_vars[,"Sex"]
Ages = death_imp_vars[,"Age"]
Residents = death_imp_vars[,"ResidentStatus"]
DayOfWeekOfDeaths = death_imp_vars[,"DayOfWeekOfDeath"]
MethodOfDisposition = death_imp_vars[,"MethodOfDisposition"]
Education2003Revision = death_imp_vars[,"Education2003Revision"]
Autopsy = death_imp_vars[,"Autopsy"]
PlaceOfInjury = death_imp_vars[,"PlaceOfInjury"]
RaceRecode5 = death_imp_vars[,"RaceRecode5"]
#death_imp_vars %>% mutate(sexNum = ifelse(Sex == "M", 0, 1)) %>% select(MannerOfDeath, sexNum) -> data2
#death_imp_vars %>% mutate(disposNum = ifelse(MethodOfDisposition == "B", 0, ifelse(MethodOfDisposition == "C", 1, ifelse(MethodOfDisposition == "D", 2, ifelse(MethodOfDisposition == "E", 3, ifelse(MethodOfDisposition == "O", 4, ifelse(MethodOfDisposition == "R", 5, 6))))))) %>% select(MannerOfDeath, disposNum)-> data2
#View(data2)
chisq.test(Ys, DayOfWeekOfDeaths)
chisq.test(Ys, MethodOfDisposition)
chisq.test(Ys, Education2003Revision)
chisq.test(Ys, Autopsy)
chisq.test(Ys, PlaceOfInjury)
chisq.test(Ys, RaceRecode5)
chisq.test(Ys, Sexs)
chisq.test(Ys, Ages)
chisq.test(Ys, Residents)
Ys = death_imp_vars[,"MannerOfDeath"]
Sexs = death_imp_vars[,"Sex"]
Ages = death_imp_vars[,"Age"]
Residents = death_imp_vars[,"ResidentStatus"]
DayOfWeekOfDeaths = death_imp_vars[,"DayOfWeekOfDeath"]
MethodOfDisposition = death_imp_vars[,"MethodOfDisposition"]
Education2003Revision = death_imp_vars[,"Education2003Revision"]
Autopsy = death_imp_vars[,"Autopsy"]
PlaceOfInjury = death_imp_vars[,"PlaceOfInjury"]
RaceRecode5 = death_imp_vars[,"RaceRecode5"]
#death_imp_vars %>% mutate(sexNum = ifelse(Sex == "M", 0, 1)) %>% select(MannerOfDeath, sexNum) -> data2
#death_imp_vars %>% mutate(disposNum = ifelse(MethodOfDisposition == "B", 0, ifelse(MethodOfDisposition == "C", 1, ifelse(MethodOfDisposition == "D", 2, ifelse(MethodOfDisposition == "E", 3, ifelse(MethodOfDisposition == "O", 4, ifelse(MethodOfDisposition == "R", 5, 6))))))) %>% select(MannerOfDeath, disposNum)-> data2
#View(data2)
chisq.test(Ys, DayOfWeekOfDeaths)
chisq.test(Ys, MethodOfDisposition)
chisq.test(Ys, Education2003Revision)
chisq.test(Ys, Autopsy)
chisq.test(Ys, PlaceOfInjury)
chisq.test(Ys, RaceRecode5)
chisq.test(Ys, Sexs)
chisq.test(Ys, Ages)
chisq.test(Ys, Residents)
death_imp_vars_factor = death_imp_vars
#View(death_imp_vars_factor)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
death_imp_vars$Age = as.factor(death_imp_vars_factor$Age)
death_imp_vars$DayOfWeekOfDeath = as.factor(death_imp_vars_factor$DayOfWeekOfDeath)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
death_imp_vars$Education2003Revision = as.factor(death_imp_vars_factor$Education2003Revision)
death_imp_vars$PlaceOfInjury = as.factor(death_imp_vars_factor$PlaceOfInjury)
death_imp_vars$RaceRecode5 = as.factor(death_imp_vars_factor$RaceRecode5)
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars_factor)
summary(model_logit)
imp_vars = c("Id", "ResidentStatus", "MannerOfDeath" ,"MethodOfDisposition", "Education2003Revision", "Autopsy" ,"PlaceOfInjury", "RaceRecode5")
death_imp_vars <- death %>% select(c(imp_vars))
death_imp_vars[,"MannerOfDeath"] = death_imp_vars[,"MannerOfDeath"] - 2
death_imp_vars_factor = death_imp_vars
#View(death_imp_vars_factor)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
#death_imp_vars$DayOfWeekOfDeath = as.factor(death_imp_vars_factor$DayOfWeekOfDeath)
death_imp_vars$ResidentStatus = as.factor(death_imp_vars_factor$ResidentStatus)
death_imp_vars$Education2003Revision = as.factor(death_imp_vars_factor$Education2003Revision)
death_imp_vars$PlaceOfInjury = as.factor(death_imp_vars_factor$PlaceOfInjury)
death_imp_vars$RaceRecode5 = as.factor(death_imp_vars_factor$RaceRecode5)
model_logit = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = death_imp_vars)
summary(model_logit)
data4 = death_imp_vars
data4$predicted = predict(model_logit, data4, type = "response")
library(thatssorandom)
ggmm(data4, MannerOfDeath, Education2003Revision)
#ggmm(data4, MannerOfDeath, DayOfWeekOfDeath)
ggmm(data4, MannerOfDeath, Autopsy)
ggmm(data4, MannerOfDeath, MethodOfDisposition)
ggmm(data4, MannerOfDeath, PlaceOfInjury)
ggmm(data4, MannerOfDeath, RaceRecode5)
ppp = plot(model_logit)
data4 = death_imp_vars
data4$predicted = predict(model_logit, data4, type = "response")
library(thatssorandom)
ggmm(data4, MannerOfDeath, Education2003Revision)
#ggmm(data4, MannerOfDeath, DayOfWeekOfDeath)
ggmm(data4, MannerOfDeath, Autopsy)
ggmm(data4, MannerOfDeath, MethodOfDisposition)
ggmm(data4, MannerOfDeath, PlaceOfInjury)
ggmm(data4, MannerOfDeath, RaceRecode5)
ppp = plot(model_logit)
set.seed(003)
data5 = death_imp_vars[sample(1:nrow(death_imp_vars)), ]
train = death_imp_vars %>% slice(1: (0.8 * nrow(death_imp_vars)))
test = death_imp_vars %>% slice((0.8 * nrow(death_imp_vars)): nrow(death_imp_vars))
model_logit5 = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = train)
train$predict = predict(model_logit5, train, type = "response")
train$predict = ifelse(train$predict <= 0.5, 0, 1)
test$predict = predict(model_logit5, test, type = "response")
test$predict = ifelse(test$predict <= 0.5, 0, 1)
test$MannerOfDeath = as.factor(test$MannerOfDeath)
library(e1071)
cmMatrix = confusionMatrix( as.factor(test$predict), as.factor(test$MannerOfDeath))
cmMatrix
cm_info = ConfusionMatrixInfo( data = test, predict = "predict",
actual = "MannerOfDeath", cutoff = .5)
cm_info$plot
#train$predict = as.factor(train$predict)
#test$predict = as.factor(test$predict)
#train$MannerOfDeath = as.factor(train$MannerOfDeath)
#test$MannerOfDeath = as.factor(test$MannerOfDeath)
accuracy_info = AccuracyCutoffInfo( train = train, test = test,
predict = "predict", actual = "MannerOfDeath" )
accuracy_info$plot
cost_fp = 100;cost_fn = 200
roc_info = ROCInfo( data = cm_info$data, predict = "predict",
actual = "actual", cost.fp = cost_fp, cost.fn = cost_fn )
cm_info = ConfusionMatrixInfo( data = test, predict = "predict",
actual = "MannerOfDeath", cutoff = .5)
cm_info$plot
set.seed(003)
data5 = death_imp_vars[sample(1:nrow(death_imp_vars)), ]
train = death_imp_vars %>% slice(1: (0.8 * nrow(death_imp_vars)))
test = death_imp_vars %>% slice((0.8 * nrow(death_imp_vars)): nrow(death_imp_vars))
model_logit5 = glm(formula = MannerOfDeath ~ ., family = binomial(link = "logit"), data = train)
train$predict = predict(model_logit5, train, type = "response")
train$predictRound = ifelse(train$predict <= 0.5, 0, 1)
test$predict = predict(model_logit5, test, type = "response")
test$predictRound = ifelse(test$predict <= 0.5, 0, 1)
test$MannerOfDeath = as.factor(test$MannerOfDeath)
library(e1071)
cmMatrix = confusionMatrix( as.factor(test$predictRound), as.factor(test$MannerOfDeathRound))
cmMatrix = confusionMatrix( as.factor(test$predictRound), as.factor(test$MannerOfDeath))
cmMatrix
cm_info = ConfusionMatrixInfo( data = test, predict = "predict",
actual = "MannerOfDeath", cutoff = .5)
cm_info$plot
#train$predict = as.factor(train$predict)
#test$predict = as.factor(test$predict)
#train$MannerOfDeath = as.factor(train$MannerOfDeath)
#test$MannerOfDeath = as.factor(test$MannerOfDeath)
accuracy_info = AccuracyCutoffInfo( train = train, test = test,
predict = "predict", actual = "MannerOfDeath" )
accuracy_info$plot
cost_fp = 100;
cost_fn = 200
roc_info = ROCInfo( data = cm_info$data, predict = "predict",
actual = "actual", cost.fp = cost_fp, cost.fn = cost_fn )
source("unbalanced_functions.R")
#train$predict = as.factor(train$predict)
#test$predict = as.factor(test$predict)
#train$MannerOfDeath = as.factor(train$MannerOfDeath)
#test$MannerOfDeath = as.factor(test$MannerOfDeath)
accuracy_info = AccuracyCutoffInfo( train = train, test = test,
predict = "predict", actual = "MannerOfDeath" )
roc_info = ROCInfo( data = cm_info$data, predict = "predict",
actual = "actual", cost.fp = cost_fp, cost.fn = cost_fn )
grid.draw(roc_info$plot)
